/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Skeeing;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;

/**
 *
 * @author vijay
 */
public class Skeeing {
    
     static int count=0;
     static Point[][] datapoints;
    
    public static Point validate(Point base, Point adjacent)
    {
       if ((base.value>adjacent.value))
       {
           base.adjacent.add(adjacent);
           return base;
       }
       else
           return base;
        
    
     
    }
    
    public static Point[][] readPoints(File data) throws FileNotFoundException
    {
        
        Point[][]  point=null;
       Scanner s = new Scanner(data);
        
    String[] fields = null;
		int[] size = new int[2];
		if (s.hasNextLine()) {
			fields = s.nextLine().split(" ");

			if (fields.length != 2) {
				throw new IllegalArgumentException("Invalid Size");
			} else {
				for (int i = 0; i < fields.length; i++)
					size[i] = Integer.parseInt(fields[i]);
				point = new Point[size[0]][size[1]];
			}

		}

		int rowIndex = 0;
		while (s.hasNextLine()) {
			String line = s.nextLine();
			if (line.isEmpty())
				break;
			fields = line.split(" ");
			if (fields.length != size[1])
				throw new IllegalArgumentException("No of columns doesn't match the given size");

			for (int colIndex = 0; colIndex < fields.length; colIndex++)
                            
				point[rowIndex][colIndex] = new Point(Integer.parseInt(fields[colIndex]));
						
			rowIndex++;
		}
		
		if (rowIndex != size[0])
			throw new IllegalArgumentException("No of rows doesn't match the given size");
		
		return point;
		}

     public static Point deepestpath(Point p)
     { int i;
        if(p.IsVisited)
        {
        
          return p;
        }
        else
        {
        p.IsVisited=true;
        List<Point> adjacentPoints=p.adjacent;
        if(adjacentPoints.isEmpty())
        {
            p.deapth=0;
            p.nextDeepestPoint=null;
          
        }
        else{
        
         Point MaxPoint= deepestpath(adjacentPoints.get(0));
         for ( i = 1; i < adjacentPoints.size(); i++) {
					Point nextPoint = deepestpath(adjacentPoints.get(i));
					if(MaxPoint.deapth < nextPoint.deapth)
						MaxPoint = nextPoint;
                                        else
                                        {
                                        
                                           if(MaxPoint.deapth==nextPoint.deapth)
                                               MaxPoint=compare(MaxPoint,nextPoint);
                                        }
					
        }
        p.deapth=MaxPoint.deapth;
        p.nextDeepestPoint=MaxPoint;
        p.depestPointDeapth=MaxPoint.depestPointDeapth;
        
        }
              
        }
        p.deapth++;
        return p;
     }
     
     
     
     public static Point compare(Point p1, Point p2)
     {
     int first=p1.deapth-p1.depestPointDeapth;
     
     int second=p2.deapth-p2.depestPointDeapth;
     if(first>second)
         return p1;
     else
         return p2;
     
     
     }
   public static Point maximumPath()
   {
       Point highest= datapoints[0][0];
       for (int i = 0; i < datapoints[0].length; i++) {
			for (int j = 0; j < datapoints[1].length; j++) {
				if (datapoints[i][j].deapth < highest.deapth) {
					continue;
				} else if (datapoints[i][j].deapth > highest.deapth) {
					highest = datapoints[i][j];
				} 
                                else{
                                    
                                highest=compare(highest,datapoints[i][j] );
                                }
			}
		}
   return highest;
        
   }
    
    
    
 public static void main(String[] args) throws FileNotFoundException  {

   
 
     File DataFile= new File("data.txt");
    datapoints=readPoints(DataFile);
   
     final long startTime = System.currentTimeMillis();
 for (int i=0;i<datapoints[0].length;i++)
 {
    for(int j=0;j<datapoints[1].length;j++)
    {
        
        datapoints[i][j].adjacent=new ArrayList<Point>();
            
       if(i<(datapoints[0].length)-1)
           validate(datapoints[i][j],datapoints[i+1][j]);
       
         if(j<(datapoints[1].length)-1)
        validate(datapoints[i][j],datapoints[i][j+1]);
           
         
        if(i>0)
             validate(datapoints[i][j],datapoints[i-1][j]);
        
         
        if(j>0)
            validate(datapoints[i][j],datapoints[i][j-1]);
        
         
      
         
        
            
 
    
        
 }
}

     
for (int i=0;i<datapoints[0].length;i++)
 {
    for(int j=0;j<datapoints[1].length;j++)
    { 
       Point p1=  deepestpath(datapoints[i][j]);
            
          
    }
 }

Point p= maximumPath();
int value=p.value;
     System.out.println(value);
     
while (p.nextDeepestPoint != null) {
			System.out.println(p.value + " -> ");
			p = p.nextDeepestPoint;
		}

		System.out.println(p.value + " -> ");
 final long endTime = System.currentTimeMillis();
// System.out.println("Total execution time: " + (endTime - startTime));
 
 
 
 
  }
 
}
 
 

 

 
 
 

 

